import json
import logging
import requests
import time
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from modules.send import receive_link  # –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó receive_link –∑ send.py

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

# API —Ç–æ–∫–µ–Ω Monobank
MONOBANK_API_TOKEN = "uSdOxQuJ1_mmahr8Ke7ImZNp2H8WRJvRpAnjCM36-JDI"
ACCOUNT_ID = "cEeQ-klTV5tseZmWL1j-Y7BP-Po4OeY"  # ID —Ä–∞—Ö—É–Ω–∫—É "–ù–∞ —Ç–æ–≤–∞—Ä–∫—É"

# –¢–æ–∫–µ–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞
NOTIFICATION_BOT_TOKEN = "7990285286:AAHwOfV_aOH_42TZrmJTVN9JIIsGtayAGFI"
NOTIFICATION_CHAT_ID = "-4501440341"  # ID —á–∞—Ç—É –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USERS_FILE = 'users.json'

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ñ–∞–π–ª—É
def load_users():
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ñ–∞–π–ª
def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=4)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–∞–π—Ç—ñ–≤ –∑–∞ —Ç–∞—Ä–∏—Ñ–æ–º
def get_max_sites_by_tariff(tariff):
    tariffs = {
        '–ó–≤–∏—á–∞–π–Ω–∏–π': 1,
        '–ü—Ä–æ': 3,
        '–ë—ñ–∑–Ω–µ—Å': 10,
    }
    return tariffs.get(tariff, 1)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–¥–æ–ª–∞—Ä–∏ -> –≥—Ä–∏–≤–Ω—ñ)
def generate_payment_amount(dollar_amount):
    exchange_rate = 41
    base_amount = dollar_amount * exchange_rate
    unique_cents = round(time.time() % 1, 2)  # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ–ø—ñ–π–∫–∏
    return round(base_amount + unique_cents, 2)

def check_transactions(amount, from_time, to_time):
    url = f"https://api.monobank.ua/personal/statement/{ACCOUNT_ID}/{from_time}/{to_time}"
    headers = {
        "X-Token": MONOBANK_API_TOKEN
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        transactions = response.json()
        for tx in transactions:
            if tx['amount'] == amount * 100:  # –°—É–º–∞ –≤ –∫–æ–ø—ñ–π–∫–∞—Ö
                return True
    return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
async def top_up_balance(user_id, context):
    users = load_users()
    
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
    if str(user_id) not in users:
        users[str(user_id)] = {
            'tariff': '–ó–≤–∏—á–∞–π–Ω–∏–π',
            'sites': [],
            'domens': [],
            'expected_amount': 0,
            'available_sites': 0  # –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤
        }
        save_users(users)

    user_data = users[str(user_id)]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    tariff = user_data.get('tariff', '–ó–≤–∏—á–∞–π–Ω–∏–π')

    logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {tariff}.")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É

    # –í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—ñ–≤ —É –¥–æ–ª–∞—Ä–∞—Ö
    tariffs_cost = {
        '–ó–≤–∏—á–∞–π–Ω–∏–π': 10,
        '–ü—Ä–æ': 30,
        '–ë—ñ–∑–Ω–µ—Å': 100
    }

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É —É –≥—Ä–∏–≤–Ω—è—Ö
    dollar_amount = tariffs_cost.get(tariff, 10)
    amount_uah = generate_payment_amount(dollar_amount)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
    await context.bot.send_message(
        chat_id=user_id,
        text=f"–í–∞—à —Ç–∞—Ä–∏—Ñ: {tariff}. –î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ {amount_uah} –≥—Ä–Ω. "
             f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ü—é —Å—É–º—É –Ω–∞ 5375411222893203"
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    users[str(user_id)]['expected_amount'] = amount_uah
    save_users(users)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É"
    keyboard = [[InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data='check_payment')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(user_id, "–ü—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É' –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂—É.", reply_markup=reply_markup)

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def send_user_menu(user_id, context):
    users = load_users()  # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—É—Ç
    user_data = users.get(str(user_id), {})
    tariff = user_data.get('tariff', '–ó–≤–∏—á–∞–π–Ω–∏–π')  # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∞–π—Ç—ñ–≤ –∑–∞ —Ç–∞—Ä–∏—Ñ–æ–º
    max_sites = get_max_sites_by_tariff(tariff)
    active_sites = len(user_data.get('sites', []))  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤
    available_sites = user_data.get('available_sites', 0)  # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤

    # –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–∞–π—Ç–∏ –º–µ–Ω—à—ñ –∑–∞ 0, —Å—Ç–∞–≤–∏–º–æ 0
    if available_sites < 0:
        available_sites = 0

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ —Å–∞–π—Ç", callback_data='add_site')],
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω", callback_data='add_domen')],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ", callback_data='choose_tariff')],
      
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é
    await context.bot.send_message(
        chat_id=user_id,
        text=f'üÜî –í–∞—à ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}\n\n'
             f'üë®‚Äçüíª –í–∞—à —Ç–∞—Ä–∏—Ñ: {tariff}\n'
             f'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤: {active_sites}\n'
             f'#Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∞–π—Ç—ñ–≤: {available_sites}\n'
             f'üîó –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤: {len(user_data.get("domens", []))}\n',
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —á–∞—Ç
async def send_notification_to_chat(context, message):
    notification_bot = Application.builder().token(NOTIFICATION_BOT_TOKEN).build()
    await notification_bot.bot.send_message(chat_id=NOTIFICATION_CHAT_ID, text=message)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–∞–¥—ñ–π—à–ª–∏ –∫–æ—à—Ç–∏ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É"
async def check_payment_status_button(query: Update, context) -> None:
    user_id = query.from_user.id
    users = load_users()
    user_data = users.get(str(user_id), {})
    expected_amount = user_data.get('expected_amount', 0)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å—É–º—É

    if expected_amount > 0:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        current_time = int(time.time())
        ten_minutes_ago = current_time - 600  # 10 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É

        if check_transactions(expected_amount, ten_minutes_ago, current_time):
            await query.message.reply_text(f"–ü–ª–∞—Ç—ñ–∂ –Ω–∞ —Å—É–º—É {expected_amount} –≥—Ä–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∞—à —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ—É
            new_tariff = user_data.get('new_tariff')
            max_sites = get_max_sites_by_tariff(new_tariff)
            user_data['available_sites'] = max_sites  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤
            user_data['tariff'] = new_tariff  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ
            save_users(users)

            # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é –∑ —Å—Ç–∞—Ç—É—Å–æ–º –∞–∫–∞—É–Ω—Ç—É
            await send_user_menu(user_id, context)
        else:
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ –ø–ª–∞—Ç—ñ–∂ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ
            await query.message.reply_text(
                f"–ü–ª–∞—Ç—ñ–∂ –Ω–∞ —Å—É–º—É {expected_amount} –≥—Ä–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. "
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏."
            )

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            keyboard = [[InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data='check_payment')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(user_id, "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É'.", reply_markup=reply_markup)
    else:
        await query.message.reply_text("–ù–µ–º–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.")

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ú–µ–Ω—é" —Ç–∞ "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞" –ø—ñ–¥ –æ—Å–Ω–æ–≤–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
async def send_persistent_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [['üè† –ú–µ–Ω—é', 'üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞']],
        resize_keyboard=True  # –ó–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    )
    persistent_message = await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=keyboard)
    context.user_data['persistent_message_id'] = persistent_message.message_id


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ—É
async def button(update: Update, context) -> None:
    query = update.callback_query
    user_id = query.from_user.id  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users = load_users()

    await query.message.delete()

    if query.data == 'top_up_balance':
        await top_up_balance(user_id, context)  # –ü–µ—Ä–µ–¥–∞—î–º–æ user_id
    elif query.data == 'check_payment':
        await check_payment_status_button(query, context)
    elif query.data == 'add_site':
        message = await query.message.reply_text("–î–æ–¥–∞–π—Ç–µ –≤–∞—à —Å–∞–π—Ç:")
        context.user_data['site_message_id'] = message.message_id
    elif query.data == 'add_domen':
        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–æ–º–µ–Ω—É
        dollar_amount = 100
        amount_uah = generate_payment_amount(dollar_amount)

        await query.message.reply_text(
            f"–î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º—É {amount_uah}, "
          
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ü—é —Å—É–º—É –Ω–∞ 5375411222893203."
        )

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É"
        keyboard = [[InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data='check_payment_domen')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(user_id, "–ü—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É' –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂—É.", reply_markup=reply_markup)

    elif query.data == 'choose_tariff':
        keyboard = [
            [InlineKeyboardButton("–ó–≤–∏—á–∞–π–Ω–∏–π - 1 —Å–∞–π—Ç/7 –¥–Ω—ñ–≤ (10$)", callback_data='tariff_normal')],
            [InlineKeyboardButton("–ü—Ä–æ - 3 —Å–∞–π—Ç–∏/14 –¥–Ω—ñ–≤ (30$)", callback_data='tariff_pro')],
            [InlineKeyboardButton("–ë—ñ–∑–Ω–µ—Å - 10 —Å–∞–π—Ç—ñ–≤/30 –¥–Ω—ñ–≤ (100$)", callback_data='tariff_business')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text('–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:', reply_markup=reply_markup)
    elif query.data.startswith('tariff_'):
        new_tariff = query.data.split('_')[1]
        tariffs = {
            'normal': '–ó–≤–∏—á–∞–π–Ω–∏–π',
            'pro': '–ü—Ä–æ',
            'business': '–ë—ñ–∑–Ω–µ—Å',
        }
        selected_tariff = tariffs.get(new_tariff, '–ó–≤–∏—á–∞–π–Ω–∏–π')

        # –í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—ñ–≤ —É –¥–æ–ª–∞—Ä–∞—Ö
        tariffs_cost = {
            '–ó–≤–∏—á–∞–π–Ω–∏–π': 10,
            '–ü—Ä–æ': 30,
            '–ë—ñ–∑–Ω–µ—Å': 100
        }

        dollar_amount = tariffs_cost.get(selected_tariff, 10)
        amount_uah = generate_payment_amount(dollar_amount)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ —ñ —Å—É–º—É –≤ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_data = users.get(str(user_id), {})
        user_data['new_tariff'] = selected_tariff  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ
        user_data['expected_amount'] = amount_uah  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω—É —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        users[str(user_id)] = user_data
        save_users(users)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ —Ç–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
        await query.message.reply_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {selected_tariff}. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º—É {amount_uah} –≥—Ä–Ω. "
          
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ü—é —Å—É–º—É –Ω–∞ 5375411222893203."
        )

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É"
        keyboard = [[InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data='check_payment')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(user_id, "–ü—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É' –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂—É.", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context) -> None:
    text = update.message.text
    user_id = update.message.from_user.id
    users = load_users()

    if text == 'üè† –ú–µ–Ω—é':
        await send_user_menu(user_id, context)
    elif text == 'üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞':
        await update.message.reply_text("–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—à–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: @suport_2208")
    elif 'http://' in text or 'https://' in text:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ URL
        user_data = users.get(str(user_id), {})
        
        max_sites = get_max_sites_by_tariff(user_data.get('tariff', '–ó–≤–∏—á–∞–π–Ω–∏–π'))
        active_sites = len(user_data.get('sites', []))

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤
        available_sites = user_data.get('available_sites', 0)  # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤

        if active_sites < available_sites:  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ —â–µ –¥–æ–¥–∞—Ç–∏ —Å–∞–π—Ç
            await receive_link(update, context)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é receive_link, —è–∫–∞ –≤–∂–µ —î –≤ send.py

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_data['sites'].append(text)  # –î–æ–¥–∞—î–º–æ —Å–∞–π—Ç
            user_data['available_sites'] = available_sites - 1  # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≤ users.json
            users[str(user_id)] = user_data
            save_users(users)

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —á–∞—Ç –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∞–π—Ç—É
            await send_notification_to_chat(context, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–≤ —Å–∞–π—Ç: {text}")

        else:
            await update.message.reply_text(f"–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∞–π—Ç—ñ–≤ –∑–∞ –≤–∞—à–∏–º —Ç–∞—Ä–∏—Ñ–æ–º ({max_sites} —Å–∞–π—Ç–∏).")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é
        await send_user_menu(user_id, context)

    else:
        user_data = users.get(str(user_id), {})
        if 'domens' not in user_data:
            user_data['domens'] = []
        user_data['domens'].append(text)  # –î–æ–¥–∞—î–º–æ –¥–æ–º–µ–Ω –≤ –º–∞—Å–∏–≤ 'domens'
        users[str(user_id)] = user_data
        save_users(users)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —á–∞—Ç –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É
        await send_notification_to_chat(context, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–≤ –¥–æ–º–µ–Ω: {text}")

        await update.message.reply_text("–î—è–∫—É—é! –°–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")
        await send_user_menu(user_id, context)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –º–µ–Ω—é

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    users = load_users()
    if str(user_id) not in users:
        users[str(user_id)] = {
            'tariff': '–ó–≤–∏—á–∞–π–Ω–∏–π',
            'sites': [],
            'domens': [],
            'expected_amount': 0,
            'available_sites': 1  # –î–æ–¥–∞—î–º–æ 1 –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å–∞–π—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É
        }
        save_users(users)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await update.message.reply_text(
            "–í—ñ—Ç–∞—î–º–æ! –£ –≤–∞—Å —î 1 –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å–∞–π—Ç –¥–ª—è —Ç–µ—Å—Ç—É. –ú–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏–º–µ–º–æ —Å–ø–∞–º –ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤–∏–ª–∏–Ω."
        )
        await send_notification_to_chat(context, f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_id} –æ—Ç—Ä–∏–º–∞–≤ 1 –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å–∞–π—Ç –¥–ª—è —Ç–µ—Å—Ç—É.")

    await send_user_menu(user_id, context)  # –ü–µ—Ä–µ–¥–∞—î–º–æ user_id –∑–∞–º—ñ—Å—Ç—å update
    await send_persistent_keyboard(update, context)  # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    application = Application.builder().token("7362910993:AAFxDBixzl1DOl9msPK4jjvaL1ASifrfvPQ").build()

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è handle_message

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
